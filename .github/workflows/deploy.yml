name: on-container-cicd
on:
  workflow_dispatch:
    inputs:
      ref: # 📦 체크아웃할 Git 브랜치나 태그
        description: 'Git branch or tag to checkout (ex: main, release/v1.0)'
        required: true
        default: main
      version: # 🐳 도커 이미지에 붙일 태그
        description: 'Docker Image Version Tag (ex: 1.0.0)'
        required: true
        default: latest

jobs:
  build:
    runs-on: ubuntu-latest #여긴 github hosting사용
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.inputs.ref }}'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Gradlew #jar파일 생성
        run: ./gradlew clean test bootJar

      - name: docker image build #DockerFile으로 springBoot app docker image 파일 빌드(docker build -t 이미지이름:태그 .)
        run: docker build -t ${{ secrets.DOCKERHUB_USER_NAME }}/daehakJumak:${{ github.event.inputs.version }} .

      - name: docker hub login #docker hub(registry)에 로그인 후, (github action runner에만 이미지 저장하지 않고 ec2 self hosted를 위해 Docker Registry에 저장하기 위함)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: docker image push #만든 docker image 파일 dockerhub내 repository로 push
        run: docker push ${{ secrets.DOCKERHUB_USER_NAME }}/daehakJumak:${{ github.event.inputs.version }}


  run-docker-iamge-on-ec2:
    runs-on: self-hosted #ec2사용
    needs:
      - build
    #dockerhub repository에서 생성한 image pull 및 실행, 리소스 정리
    steps:
      - name: docker pull #Docker Registry에서 이미지 받기
        run: docker pull ${{ secrets.DOCKERHUB_USER_NAME }}/daehakJumak:${{ github.event.inputs.version }}

      - name: docker app service container stop
        run: docker-compose down #모든 실행중이 컨테이너 down, 특정 컨테이너만 종료하고 싶으면 stop사용

      - name: docker app service container start #MySQL은 별도의 이미지 따로 필요없이 공식 이미지 시영
        run: docker-compose up -d #springboot-app과 MySQL을 포함한 docker-compose에 정의한 모든 image들 Docker Compose로 container 실행,

      - name: delete old docker image
        run: docker system prune -f