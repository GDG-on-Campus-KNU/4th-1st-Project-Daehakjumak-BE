name: on-container-cicd
on:
  workflow_dispatch:
    inputs:
      ref: # 📦 체크아웃할 Git 브랜치나 태그
        description: 'Git branch or tag to checkout (ex: main, release/v1.0)'
        required: true
        default: main
      version: # 🐳 도커 이미지에 붙일 태그
        description: 'Docker Image Version Tag (ex: 1.0.0)'
        required: true
        default: latest

jobs:
  build:
    runs-on: ubuntu-latest #여긴 github hosting사용
    steps:
      - name: Checkout Source Code #GitHub 저장소의 코드를 워크플로우가 실행되는 러너(runner) 환경으로 가져오는 작업을 수행
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.inputs.ref }}'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Gradlew #github Server에서 jar파일 생성
        run: ./gradlew clean bootJar

      - name: docker image build #Github Runner에서 DockerFile으로 springBoot app docker image 파일 빌드(docker build -t 이미지이름:태그 .)
        run: docker build -t ${{ secrets.DOCKERHUB_USER_NAME }}/daehakjumak:${{ github.event.inputs.version }} . #Docker image의 repository 이름 다 소문자여야함

      - name: docker hub login #docker hub(registry)에 로그인 후, (github action runner에만 이미지 저장하지 않고 ec2 self hosted를 위해 Docker Registry에 저장하기 위함)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: docker image push #만든 docker image 파일 dockerhub내 repository로 push
        run: docker push ${{ secrets.DOCKERHUB_USER_NAME }}/daehakjumak:${{ github.event.inputs.version }}


  run-docker-iamge-on-ec2:
    runs-on: self-hosted #ec2사용
    needs:
      - build
    env:
      DB_USER: ${{ secrets.DB_USER }} #github repo [Settings]-[Secrets and Variables]에 정의한 변수 사용
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DOCKERHUB_USER_NAME: ${{ secrets.DOCKERHUB_USER_NAME }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    #dockerhub repository에서 생성한 image pull 및 실행, 리소스 정리
    steps:
      - name: Checkout Source Code #docker-compose.yml포함 git repo 소스코드 최신화 (GitHub Actions의 self-hosted runner는 GitHub 저장소와 연결되어 있어서 actions/checkout@v4 액션을 사용 가능)
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.inputs.ref }}'

      - name: Create .env file # >(overwrite): .env 파일이 기존에 있더라도 무조건 새로 만들어서 "DB_USER=..."부터 다시 시작
        run: |
          echo "DB_USER=${DB_USER}" > .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
          echo "DOCKERHUB_USER_NAME=${DOCKERHUB_USER_NAME}" >> .env
          echo "S3_BUCKET_NAME=${S3_BUCKET_NAME}" >> .env
          echo "AWS_ACCESS_KEY=${AWS_ACCESS_KEY}" >> .env
          echo "AWS_SECRET_KEY=${AWS_SECRET_KEY}" >> .env
          echo "SECRET_KEY=${SECRET_KEY}" >> .env

      - name: docker pull #Docker Registry에서 이미지 받기
        run: docker pull ${{ secrets.DOCKERHUB_USER_NAME }}/daehakjumak:${{ github.event.inputs.version }}

      - name: docker app service container stop
        run: docker-compose down #모든 실행중이 컨테이너 down, 특정 컨테이너만 종료하고 싶으면 stop사용

      - name: docker app service container start #MySQL은 별도의 이미지 따로 필요없이 공식 이미지 시영
        run: docker-compose up -d #springboot-app과 MySQL을 포함한 docker-compose에 정의한 모든 image들 Docker Compose로 container 실행,

      - name: delete old docker image
        run: docker system prune -f